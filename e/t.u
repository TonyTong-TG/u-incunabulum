(define a 5)
(define b 3)
(+ a b)
(- a b)
(* a b)
(/ a b)
(< a b)
(> a b)
(eq a b)
(eq a a)
(eq #t #nil)
(eq #nil #nil)
(eq #t #t)
(define lst (cons 1 (cons 2 (cons 3 (quote ())))))
lst
(car lst)
(cdr lst)
(car (cdr lst))
(atom (quote a))
(atom (quote (a)))
(atom #nil)
(eq (quote ()) #nil)
(if (< a b) a b)
(if (> a b) a b)
(cond
  ((< a b) (quote less))
  ((> a b) (quote greater))
  (else (quote equal)))
((lambda (x y) (* x (+ y 2))) 4 5)
(define square (lambda (x) (* x x)))
(square 6)
(define fact
  (lambda (n)
    (if (< n 2)
        1
        (* n (fact (- n 1))))))
(fact 7)
(atom 3)
(atom (quote (1 . 2)))
(cons 1 2)
(or (< 1 2) (> 2 3))
(and (< 1 2) (> 1 0))
(xor #t #nil #t)
(not (> 1 0))
(not #nil)
(defmacro when (cond body)
  (cons (quote if)
        (cons cond
              (cons body
                    (cons #nil #nil)))))
(when (< 2 3)
  (define testx 42))
testx
(defmacro unless (cond body)
  (cons (quote if)
        (cons (cons (quote not) (cons cond #nil))
              (cons body (cons #nil #nil)))))
(define y 0)
(unless (< y 1)
  (define y 100))
y
(defmacro infix (x op y)
  (cons op (cons x (cons y #nil))))
(infix 3 (quote *) 4)
(defmacro and-let (var expr then)
  (cons (quote if)
        (cons expr
              (cons (cons (quote define) (cons var (cons expr #nil)))
                    (cons then (cons #nil #nil))))))
(and-let b (< 1 2)
         (define r (+ 1 2)))
r